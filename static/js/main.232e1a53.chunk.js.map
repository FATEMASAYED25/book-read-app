{"version":3,"sources":["BooksAPI.js","SearchPage.js","ListBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","SearchPage","state","onSearch","_callee","e","booksResult","regenerator_default","a","wrap","_context","prev","next","target","value","BooksAPI","sent","map","found","result","_this","props","find","undefined","console","log","setState","t0","abrupt","stop","this","updateShelf","react_default","createElement","className","react_router_dom","to","type","placeholder","onChange","key","style","width","height","backgroundImage","imageLinks","thumbnail","disabled","title","authors","Component","ListBooks","_this$props","App","filter","b","react_router","path","element","src_ListBooks","src_SearchPage","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.232e1a53.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n  \n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n  \n","import React, { Component } from 'react';\r\nimport * as BooksAPI from './BooksAPI';\r\nimport { Link } from \"react-router-dom\";\r\nclass SearchPage extends Component {\r\n  state = {\r\n    books: [],\r\n   \r\n  }\r\n//As the user types into the search field, books that match the query are displayed on the page, along with their titles and authors\r\n onSearch = async (e) => {\r\n  const query = e.target.value;\r\n  try{\r\n     let booksResult = await BooksAPI.search(query);\r\n      booksResult.map((found) => {\r\n        const result =  this.props.books.find((book) => book.id === found.id);\r\n         if (result !== undefined) {\r\n          console.log(\"result\", result);\r\n          found[\"shelf\"] = result.shelf;\r\n        } else {\r\n          found[\"shelf\"] = \"none\";\r\n        }\r\n      });\r\n      this.setState({ books: booksResult });\r\n    } catch (error) {\r\n      this.setState({ books: [] });\r\n      return;\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const { books} = this.state;\r\n    const {updateShelf}=this.props\r\n\r\n    // filter the books depends on the new value has written down in the query state \r\n  \r\n\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link to=\"/\" className=\"close-search\"></Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n\r\n            <input type=\"text\"\r\n              placeholder=\"Search by title or author\"\r\n              onChange={this.onSearch}\r\n              \r\n            />\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n\r\n          <ol className=\"books-grid\">\r\n            {books.map(book => {\r\n              return (\r\n                <li key={book.id}>\r\n                  <div className=\"book\">\r\n                    <div className=\"book-top\">\r\n                      <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                      <div className=\"book-shelf-changer\">\r\n                      <select value={book.shelf}\r\n                           onChange={(e)=>updateShelf(book,e.target.value)}//callback function that it passed arguments for updateshelf function  that is executed after some operation has been completed\r\n                              >\r\n                          <option value=\"move\" disabled>Move to...</option>\r\n                          <option value=\"none\">None</option>\r\n                          <option value=\"currentlyReading\">Currently Reading</option>\r\n                          <option value=\"wantToRead\">Want to Read</option>\r\n                          <option value=\"read\">Read</option>\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"book-title\">{book.title}</div>\r\n                    <div className=\"book-authors\">{book.authors}</div>\r\n                  </div>\r\n                </li>\r\n\r\n\r\n\r\n              )\r\n            })}\r\n          </ol>\r\n\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchPage;\r\n","import React, { Component } from 'react'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass ListBooks extends Component {\r\n\r\n\r\n    render() {\r\n      const {books ,updateShelf}=this.props\r\n    \r\n              return (\r\n         \r\n            <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <div className=\"bookshelf\" id=\"currentlyReading\">\r\n                  <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                      {books.map(book =>{\r\n                        if(book.shelf === \"currentlyReading\"){\r\n                        \r\n                        return(\r\n                      <li key={book.id}>\r\n                        <div className=\"book\" >\r\n                          <div className=\"book-top\">\r\n                            <div className=\"book-cover\" style={{ width: 128, height: 193,backgroundImage: `url(${ book.imageLinks.thumbnail})` }}></div>\r\n                            <div className=\"book-shelf-changer\">\r\n                              <select value={book.shelf}\r\n                           onChange={(e)=>updateShelf(book,e.target.value)}\r\n                              >\r\n          \r\n                              <option value=\"move\" disabled>Move to...</option>\r\n                                <option value=\"none\">None</option>\r\n                                <option value=\"currentlyReading\">Currently Reading</option>\r\n                                <option value=\"wantToRead\">Want to Read</option>\r\n                                <option value=\"read\">Read</option>\r\n                                \r\n                              </select>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"book-title\">{book.title}</div>\r\n                          <div className=\"book-authors\">{book.authors}</div>\r\n                        </div>\r\n                      </li>\r\n                )}})}\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bookshelf\" id='wantToRead'>\r\n                  <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                    {books.map(book =>{\r\n                        if(book.shelf === \"wantToRead\"){\r\n                      \r\n                      return(\r\n                      <li key={book.id}>\r\n                        <div className=\"book\" >\r\n                          <div className=\"book-top\">\r\n                            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                            <div className=\"book-shelf-changer\">\r\n                            <select value={book.shelf}\r\n                           onChange={(e)=>updateShelf(book,e.target.value)}\r\n                              >\r\n                                <option value=\"move\" disabled>Move to...</option>\r\n                                <option value=\"none\">None</option>\r\n                                <option value=\"currentlyReading\">Currently Reading</option>\r\n                                <option value=\"wantToRead\">Want to Read</option>\r\n                                <option value=\"read\">Read</option>\r\n                              </select>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"book-title\">{book.title}</div>\r\n                          <div className=\"book-authors\">{book.authors}</div>\r\n                        </div>\r\n                      </li>\r\n                      )}})}\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bookshelf\" id='read'>\r\n                  <h2 className=\"bookshelf-title\">Read</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                    {books.map(book =>{\r\n                        if(book.shelf === \"read\"){\r\n                      return(\r\n                      <li key={book.id}>\r\n                        <div className=\"book\">\r\n                          <div className=\"book-top\">\r\n                            <div className=\"book-cover\" style={{ width: 128, height: 192, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                            <div className=\"book-shelf-changer\">\r\n                            <select value={book.shelf}\r\n                           onChange={(e)=>updateShelf(book,e.target.value)}\r\n                              >\r\n                                <option value=\"move\" disabled>Move to...</option>\r\n                                <option value=\"none\">None</option>\r\n                                <option value=\"currentlyReading\">Currently Reading</option>\r\n                                <option value=\"wantToRead\">Want to Read</option>\r\n                                <option value=\"read\">Read</option>\r\n                              </select>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"book-title\">{book.title}</div>\r\n                          <div className=\"book-authors\">{book.authors}</div>\r\n                        </div>\r\n                      </li>\r\n                      )}})}\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n              <Link to=\"/search\" ></Link>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListBooks;","import React, { Component } from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport SearchPage from './SearchPage';\nimport ListBooks from './ListBooks' ;\nimport { Route ,Routes } from 'react-router-dom';\nclass App extends Component {\n  state = {\n    books:[]\n  }\n\n//revoking BooksAPI as a backend server and push all the data to empty array called books \n\nasync componentDidMount() {\n const books= await BooksAPI.getAll();\n      this.setState({books});\n    console.log(this.state.books)\n}\n\n \n\n\nupdateShelf  = (book, shelf) => {\n  BooksAPI.update(book, shelf);\n  //clone\n  book.shelf = shelf;\n  //edit\n  const books = this.state.books.filter((b) => b.id != book.id).concat(book);\n  //setstate\n  this.setState({ books });\n};\n\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Routes>\n    \n    <Route  path='/'  element= {<ListBooks \n    books={this.state.books}\n   \n    updateShelf={this.updateShelf}\n    />} />\n     <Route path='/search' element={<SearchPage \n    books={this.state.books}\n    updateShelf={this.updateShelf}\n   \n     />} />\n     </Routes>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom';  \n\n\n\n\nReactDOM.render(\n<BrowserRouter>\n\n<App />\n\n</BrowserRouter>\n\n\n\n\n, document.getElementById('root'))\n"],"sourceRoot":""}